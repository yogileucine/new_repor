{"uid":"66d872f5552f10be","name":"Test ProductWise All Criteria SAL of Productions on Equipments","fullName":"tests.scenarios.test_limit_equipments.TestLimitsOnEquipments#test_validate_formulation_equipment_sal_productwise_all_criteria","historyId":"2bc69c80168491ab7524ee6b3722000b","time":{"start":1712647875540,"stop":1712647877735,"duration":2195},"description":"This test case tests Production wise SAL when All Criteria in Policy is selected for all production mapped to Equipment","descriptionHtml":"<p>This test case tests Production wise SAL when All Criteria in Policy is selected for all production mapped to Equipment</p>\n","status":"failed","statusMessage":"AssertionError: PRD1-P24 1.323e-08 Not Equal 2.051e-09","statusTrace":"self = <test_limit_equipments.TestLimitsOnEquipments object at 0x00000152E6CF1850>\n\n    @allure.title(\"Test ProductWise All Criteria SAL of Productions on Equipments\")\n    @allure.description(\"This test case tests Production wise SAL when All Criteria in Policy is selected\"\n                        \" for all production mapped to Equipment\")\n    @allure.link(\"https://app.clickup.com/t/2te94wn\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_formulation_equipment_productwise_sal_all_criteria\n    def test_validate_formulation_equipment_sal_productwise_all_criteria(self):\n        policy_data = {\"useDosage\": True, \"useToxicity\": True, \"useProductLimit\": True, \"useARL\": True}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        data = {\"update_policy_payload\": update_policy}\n        if get_policy != update_policy[\"data\"]:\n            self.update_active_policy.test_update_active_policy(data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n        for equipment in EQUIPMENT_LIST[\"equipment_id\"]:\n            data.update({\"equipment\": equipment})\n            sheet_name = equipment + \"_productwise_sal\"\n            read_excel_column = [\"Equipment ID\", \"final_sal_mg_sqcm\"]\n            manually_calculated_limit, lowest_manually_calculated_sal = self.read_excel_sal(sheet_name,\n                                                                                            read_excel_column)\n            sal = self.get_equipment.get_production_sal_each_equipment(data)\n            lowest_sal = self.get_equipment.get_equipment_lowest_sal(data)\n>           compare_sal(sal, manually_calculated_limit, read_excel_column, self.ERROR_MESSAGE)\n\ntests\\scenarios\\test_limit_equipments.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutil\\common_methods.py:24: in compare_sal\n    compare(sal_application[i], n, i)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsal1 = 1.323e-08, sal2 = 2.051e-09, error_message = 'PRD1-P24'\n\n    def compare(sal1, sal2, error_message):\n        if sal1 != \"#N/A\" and sal2 != \"#N/A\":\n            if sal1 < 1:\n                length = (floor(log10(sal1)) - 1)\n            else:\n                length = 15 - len(str(int(sal1)))\n            if length < 0:\n                sal1 = (round(sal1, -length + 3))\n                sal2 = (round(sal2, -length + 3))\n                tolerance = calculate_tolerance(sal1)\n>               assert abs(sal1 - sal2) < tolerance, error_message + f\" {sal1} Not Equal {sal2}\"\nE               AssertionError: PRD1-P24 1.323e-08 Not Equal 2.051e-09\n\nutil\\common_methods.py:56: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1712647327079,"stop":1712647327378,"duration":299},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_facility","time":{"start":1712647327378,"stop":1712647327498,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"This method will setup cleaning limit policy","time":{"start":1712647872383,"stop":1712647875540,"duration":3157},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_formulation_equipment_productwise_sal_all_criteria"},{"name":"tag","value":"formulation"},{"name":"tag","value":"equipment_limits"},{"name":"tag","value":"limits"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_equipments"},{"name":"subSuite","value":"TestLimitsOnEquipments"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"15348-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_equipments"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/2te94wn","url":"https://app.clickup.com/t/2te94wn","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["equipment_limits","validate_formulation_equipment_productwise_sal_all_criteria","formulation","limits"]},"source":"66d872f5552f10be.json","parameterValues":[]}