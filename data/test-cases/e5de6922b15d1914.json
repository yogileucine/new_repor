{"uid":"e5de6922b15d1914","name":"Validate the absent on Protocol Microbial Endotoxin residue verification when select zero in microbial policy for room grade rinse samples for non split","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol#test_microbial_endotoxin_protocol_rinse_absent_zero_non_split_room_grade","historyId":"42d63a6565c4ae1e8a6046f27b31ef35","time":{"start":1712652127369,"stop":1712652128541,"duration":1172},"description":"This test case tests API to Validate the absent on Protocol Microbial Endotoxin residue verification when select zero in microbial policy for room grade rinse samples for non split","descriptionHtml":"<p>This test case tests API to Validate the absent on Protocol Microbial Endotoxin residue verification when select zero in microbial policy for room grade rinse samples for non split</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{}}","statusTrace":"self = <test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol object at 0x00000152E915CDD0>\n\n    @allure.title(\"Validate the absent on Protocol Microbial Endotoxin residue verification when select zero in \"\n                  \"microbial policy for room grade rinse samples for non split\")\n    @allure.description(\"This test case tests API to Validate the absent on Protocol Microbial Endotoxin residue \"\n                        \"verification when select zero in microbial policy for room grade rinse samples for non split\")\n    @allure.link(\"https://app.clickup.com/t/86cuw0kmq\")\n    @pytest.mark.formulation\n    @pytest.mark.microbial_endotoxin_protocol_rinse_absent_zero_non_split_room_grade\n    def test_microbial_endotoxin_protocol_rinse_absent_zero_non_split_room_grade(self):\n        policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        policy = json.loads(policy)\n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n>       protocol_detail, data = self.setup_protocol(data)\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:3183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:100: in setup_protocol\n    protocol_detail = self.multi_protocol.add_new_on_demand_protocol_multi_production(data)[\"response\"]\ntests\\unit\\protocols\\add_new_protocol.py:86: in add_new_on_demand_protocol_multi_production\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [500]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1712647327079,"stop":1712647327378,"duration":299},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_facility","time":{"start":1712647327378,"stop":1712647327498,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"microbial_endotoxin_protocol_rinse_absent_zero_non_split_room_grade"},{"name":"tag","value":"formulation"},{"name":"tag","value":"microbial_multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_production_protocol_microbial_policy_absent"},{"name":"subSuite","value":"TestMicrobialMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"15348-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuw0kmq","url":"https://app.clickup.com/t/86cuw0kmq","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["microbial_endotoxin_protocol_rinse_absent_zero_non_split_room_grade","scenario","formulation","microbial_multi_production_protocol"]},"source":"e5de6922b15d1914.json","parameterValues":[]}