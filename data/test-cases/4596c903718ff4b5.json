{"uid":"4596c903718ff4b5","name":"Validate the absent on Protocol Endotoxin residue verification when select zero in microbial policy","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol#test_endotoxin_protocol_absent_zero","historyId":"cdad5cc255bd8fa820075d02fdcc91ec","time":{"start":1712652027145,"stop":1712652028367,"duration":1222},"description":"This test case tests API to Validate the absent on Protocol Endotoxin residue verification when select zero in microbial policy","descriptionHtml":"<p>This test case tests API to Validate the absent on Protocol Endotoxin residue verification when select zero in microbial policy</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"DataValidationError\",\"where\":{\"domain\":\"MicrobialCleaningLimitPolicy\",\"action\":\"Modify\"},\"name\":\"Data Validation Issue\",\"errors\":[{\"target\":{\"type\":\"Unclassified\",\"samplingMethodType\":\"rinse\",\"residueType\":\"Endotoxin\",\"contactType\":\"Direct\",\"limit\":0,\"perUnitArea\":null,\"perUnitVolume\":3000,\"facilityId\":\"6a8450a7-c9a2-4c69-9fcb-425d060f3d1f\"},\"value\":0,\"property\":\"limit\",\"children\":[],\"constraints\":{\"isPositive\":\"limit must be a positive number\"}}],\"message\":\"\",\"action\":\"Modify\",\"domain\":\"MicrobialCleaningLimitPolicy\"}}","statusTrace":"self = <test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol object at 0x00000152E9129C10>\n\n    @allure.title(\"Validate the absent on Protocol Endotoxin residue verification when select zero in microbial policy\")\n    @allure.description(\"This test case tests API to Validate the absent on Protocol Endotoxin residue verification \"\n                        \"when select zero in microbial policy\")\n    @allure.link(\"https://app.clickup.com/t/86cutgp98\")\n    @pytest.mark.formulation\n    @pytest.mark.endotoxin_protocol_absent_zero\n    def test_endotoxin_protocol_absent_zero(self):\n        endotoxin_data = {}\n        vol_unit = self.policy_microbial.default_units.test_get_default_unit(data={\"default_unit_name\": \"volume\"})[\n            \"response\"]\n        surface_unit = \\\n            self.policy_microbial.default_units.test_get_default_unit(data={\"default_unit_name\": \"surface_area\"})[\n                \"response\"]\n        unit = json.loads(vol_unit)\n        surface_unit = json.loads(surface_unit)\n        bioburden_policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        bioburden_policy = json.loads(bioburden_policy)[\"result\"]\n    \n        volume_unit = unit[\"default_units\"][\"unit\"]\n        surface_area_unit = surface_unit[\"default_units\"][\"unit\"]\n    \n        limit_data = {\"default_endo\": 0, \"un_endo_value\": 0}\n    \n        payload = create_cleaning_limit_policy_microbial(bioburden_policy, {\"splitBacteriaAndFungi\": False,\n                                                                            \"takeSample\": False,\n                                                                            \"microbial_type\": \"bioBurden\",\n                                                                            \"default_unit\": volume_unit,\n                                                                            \"surface_area_unit\": surface_area_unit},\n                                                         limit_data=limit_data)\n    \n        endotoxin_data.update({\"update_policy_payload\": payload})\n>       microbial_policy_update = self.policy_microbial.test_update_microbial_cleaning_limits_policy(endotoxin_data)[\n            \"response\"]\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\settings\\cleaning_limit_policies\\test_microbial_limit_policy.py:72: in test_update_microbial_cleaning_limits_policy\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [422]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"DataValidationError\",\"where\":{\"domain\":\"MicrobialCleaningLimitPolicy\",\"action\":\"Modify\"},\"name\":\"Data Validation Issue\",\"errors\":[{\"target\":{\"type\":\"Unclassified\",\"samplingMethodType\":\"rinse\",\"residueType\":\"Endotoxin\",\"contactType\":\"Direct\",\"limit\":0,\"perUnitArea\":null,\"perUnitVolume\":3000,\"facilityId\":\"6a8450a7-c9a2-4c69-9fcb-425d060f3d1f\"},\"value\":0,\"property\":\"limit\",\"children\":[],\"constraints\":{\"isPositive\":\"limit must be a positive number\"}}],\"message\":\"\",\"action\":\"Modify\",\"domain\":\"MicrobialCleaningLimitPolicy\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1712647327079,"stop":1712647327378,"duration":299},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_facility","time":{"start":1712647327378,"stop":1712647327498,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"endotoxin_protocol_absent_zero"},{"name":"tag","value":"formulation"},{"name":"tag","value":"microbial_multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_production_protocol_microbial_policy_absent"},{"name":"subSuite","value":"TestMicrobialMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"15348-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cutgp98","url":"https://app.clickup.com/t/86cutgp98","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","formulation","endotoxin_protocol_absent_zero","microbial_multi_production_protocol"]},"source":"4596c903718ff4b5.json","parameterValues":[]}