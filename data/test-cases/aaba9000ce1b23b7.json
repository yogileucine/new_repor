{"uid":"aaba9000ce1b23b7","name":"Create Inspection on Equipment & Validate the Bioburden Residue Verification Endotoxin Samples","fullName":"tests.scenarios.multi_production_protocol.inspection.test_multi_production_protocol_inspection.TestInspectionMultiProductionProtocol#test_create_inspection_validate_the_acceptance_limit_bioburden","historyId":"8a7ffcb55695477abc34d75d726108d8","time":{"start":1712649097031,"stop":1712649098200,"duration":1169},"description":"This test case tests API to create an inspection on equipment and validate the Bioburden residue verification bioburden samples","descriptionHtml":"<p>This test case tests API to create an inspection on equipment and validate the Bioburden residue verification bioburden samples</p>\n","status":"broken","statusMessage":"KeyError: 'unit_data'","statusTrace":"self = <test_multi_production_protocol_inspection.TestInspectionMultiProductionProtocol object at 0x00000152E8FDA810>\ninspection_setup_method = ({'acceptance_limit_dict': {'EQM-19/BI-1': 19, 'EQM-19/BI-2': 19, 'EQM-19/BI-3': 13, 'EQM-19/BI-4': 13, ...}, 'bioburd... 'GreaterThan', 'value': 2}, 'swab': {'additionalInfo': '', 'enabled': True, 'rule': 'GreaterThan', 'value': 2}}, ...})\n\n    @allure.title(\"Create Inspection on Equipment & Validate the Bioburden Residue Verification Endotoxin Samples\")\n    @allure.description(\"This test case tests API to create an inspection on equipment and validate the Bioburden \"\n                        \"residue verification bioburden samples\")\n    @allure.link(\"https://app.clickup.com/t/86cungavc\")\n    @pytest.mark.formulation\n    @pytest.mark.create_inspection_validate_the_acceptance_limit_bioburden\n    def test_create_inspection_validate_the_acceptance_limit_bioburden(self, inspection_setup_method):\n    \n        microbial_policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        microbial_policy = json.loads(microbial_policy)[\"result\"]\n    \n        direct_bioburden_swab = microbial_policy[\"direct\"]['bioBurden']['bioBurden']['swab']['unclassified'][\n            'bioBurden']\n        direct_bioburden_rinse = microbial_policy[\"direct\"]['bioBurden']['bioBurden']['rinse']['unclassified'][\n            'bioBurden']\n    \n        indirect_bioburden_swab = microbial_policy[\"indirect\"]['bioBurden']['bioBurden']['swab']['unclassified'][\n            'bioBurden']\n        indirect_bioburden_rinse = microbial_policy[\"indirect\"]['bioBurden']['bioBurden']['rinse']['unclassified'][\n            'bioBurden']\n    \n        inspection_data, equipment_info, protocol_equipment = inspection_setup_method\n        get_inspection = self.multi_production_study.get_single_study_details(inspection_data)[\"response\"]\n        get_inspection = json.loads(get_inspection)[\"result\"]\n    \n        for i in range(len(equipment_info)):\n            inspection_data.update({\"inspection_id\": get_inspection[\"inspections\"][i][\"id\"]})\n            inspection = self.multi_production_inspection.get_inspection_detail(inspection_data)[\"response\"]\n            inspection = json.loads(inspection)[\"result\"]\n    \n            self.multi_production_inspection.get_endotoxin_inspection_details(inspection_data)\n    \n            acceptance_limit_dict = {residue['bioburden']['sampleExternalId']: residue['bioburden']['acceptanceLimit']\n                                     for residue in inspection[\"bioburden\"][\"residues\"]}\n    \n            for j in range(len(inspection[\"bioburden\"][\"residues\"])):\n                sample_id = inspection[\"bioburden\"][\"residues\"][j][\"bioburden\"][\"sampleExternalId\"]\n                bioburden_residue = inspection[\"bioburden\"][\"residues\"]\n                inspection_data.update({\"external_id\": sample_id.split(\"/\")[0], \"sample_type\": \"Bioburden\",\n                                        \"sample_id\": sample_id,\n                                        \"acceptance_limit_dict\": acceptance_limit_dict,\n                                        \"bioburden_residue\": bioburden_residue,\n                                        \"protocol_equipment\": protocol_equipment,\n                                        \"direct_bioburden_swab\": direct_bioburden_swab,\n                                        \"direct_bioburden_rinse\": direct_bioburden_rinse,\n                                        \"indirect_bioburden_swab\": indirect_bioburden_swab,\n                                        \"indirect_bioburden_rinse\": indirect_bioburden_rinse})\n    \n>               self.multi_production_inspection.compare_bioburden_inspection_limits(inspection_data)\n\ntests\\scenarios\\multi_production_protocol\\inspection\\test_multi_production_protocol_inspection.py:277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'acceptance_limit_dict': {'EQM-19/BI-1': 19, 'EQM-19/BI-2': 19, 'EQM-19/BI-3': 13, 'EQM-19/BI-4': 13, ...}, 'bioburde...s': ['sample type', 'sample id', 'swab_rinse_ppm', 'Rinse volume(ml)', 'rinse_limit_ppm', 'sampling area (sqcm)'], ...}\n\n    @staticmethod\n    def compare_bioburden_inspection_limits(data):\n        if data[\"protocol_equipment\"][\"direct_policy\"] is not \"custom\":\n            sheet_name = data[\"external_id\"] + \"_samples\"\n            acceptance_limit = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name,\n                                                                       data[\"columns\"], data[\"sample_type\"])\n    \n            rinse_vol = [item * cleen_enum.CleenApiEnum.CONVERT_ML_L.value if data.get(\"unit_volume\") == \"L\" else item\n                         for item in acceptance_limit[\"Rinse volume(ml)\"] if item != '#VALUE!']\n    \n>           if data[\"unit_data\"] == \"sqm\":\nE           KeyError: 'unit_data'\n\ntests\\unit\\inspection_multi_production\\inspection_multi_production_protocol.py:242: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1712647327079,"stop":1712647327378,"duration":299},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_facility","time":{"start":1712647327378,"stop":1712647327498,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"inspection_setup_method","time":{"start":1712648964991,"stop":1712649024549,"duration":59558},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"create_inspection_validate_the_acceptance_limit_bioburden"},{"name":"tag","value":"formulation"},{"name":"tag","value":"inspection_multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.inspection"},{"name":"suite","value":"test_multi_production_protocol_inspection"},{"name":"subSuite","value":"TestInspectionMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"15348-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.inspection.test_multi_production_protocol_inspection"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cungavc","url":"https://app.clickup.com/t/86cungavc","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","formulation","create_inspection_validate_the_acceptance_limit_bioburden","inspection_multi_production_protocol"]},"source":"aaba9000ce1b23b7.json","parameterValues":[]}