{"uid":"4be101b73b936829","name":"Validate the cleaning agent residue verification final summary page","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_final_summary_cleaning_agent_residue_verification_details","historyId":"ee3d2f992196277362d64faf120a90c9","time":{"start":1712651527378,"stop":1712651535009,"duration":7631},"description":"This test case tests API to Create Protocol for cleaning agent residue verification and validate the final summary details","descriptionHtml":"<p>This test case tests API to Create Protocol for cleaning agent residue verification and validate the final summary details</p>\n","status":"failed","statusMessage":"AssertionError: Rinse limits from protocol 0.0 not equal to custom data 0.039 for EQM-17/CAR-1","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x00000152E90CA5D0>\n\n    @allure.title(\"Validate the cleaning agent residue verification final summary page\")\n    @allure.description(\"This test case tests API to Create Protocol for cleaning agent residue verification and \"\n                        \"validate the final summary details\")\n    @allure.link(\"https://app.clickup.com/t/86cumczjd\")\n    @pytest.mark.validate_final_summary_cleaning_agent_residue_verification_details\n    def test_validate_final_summary_cleaning_agent_residue_verification_details(self):\n        data = self.test_select_cleaning_agent_direct_indirect_based_on_policy_multi_production_protocol()\n        no_of_runs_payload = number_of_runs_sample_limits()\n    \n        data.update({\"no_of_runs_payload\": no_of_runs_payload})\n    \n        self.protocol_common_method.update_protocol_residue_verification_sample_limits_run(data)\n    \n        final_summary = self.protocol_common_method.get_active_final_summary_details(data)[\"response\"]\n    \n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"],\n                         \"columns\": [\"sample type\", \"contact type\", \"sample id\", \"swab_limit_ppm\", \"rinse_limit_ppm\"],\n                         \"sample_type\": \"Cleaning Agent\"})\n            sample_limits = json.loads(final_summary)[\"result\"]\n            data.update({\"sample_profile\": sample_limits})\n>           self.protocol_cleaning_agent.compare_samples_swab_rinse_surface_area_cleaning_agent_summary(data)\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_prodcution_protocol.py:5444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'add_new_protocol_payload': {'authorId': 251, 'description': 'Automation Protocol', 'externalId': 'Protocol-832N', 'n...le type', 'contact type', 'sample id', 'swab_limit_ppm', 'rinse_limit_ppm'], 'description': 'Automation Protocol', ...}\n\n    @staticmethod\n    def compare_samples_swab_rinse_surface_area_cleaning_agent_summary(data):\n        policies = [data[\"direct_policy\"], data[\"indirect_policy\"]]  # Include the direct policy and indirect policy\n        for policy in policies:\n            if policy == \"custom\":\n                sheet_name = data[\"external_id\"] + \"_samples_custom\"\n            else:\n                sheet_name = data[\"external_id\"] + \"_samples\"\n            sample_limits = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name,\n                                                                    data[\"columns\"], data[\"sample_type\"])\n    \n            swab_list = [item for item in sample_limits[\"swab_limit_ppm\"] if item != '#VALUE!']\n            result_list = [item for item in sample_limits[\"rinse_limit_ppm\"] if item != '#VALUE!']\n            index = 0\n            rinse_index = 0\n            counter = 0\n            for sample_limit in data[\"sample_profile\"][\"sampleLimits\"]:\n                if sample_limit.get('sampleType') == data['sample_type']:\n                    sample_id = sample_limit.get('sampleId')\n                    if counter < len(sample_limits[\"sample id\"]):\n                        if sample_id is not None and sample_id == sample_limits[\"sample id\"][counter]:\n                            counter += 1\n                            method_type = sample_limit.get('methodType')\n                            limit_value = sample_limit['limit']['value']\n                            if limit_value is not None:\n                                if method_type == 'swab':\n                                    assert round(limit_value, 1) == round(swab_list[index], 1), \\\n                                        (f\"Swab limits from protocol {round(limit_value, 1)} not equal to custom data \"\n                                         f\"{round(swab_list[index], 1)} for {sample_id}\")\n                                    index += 1\n                                elif method_type == 'rinse':\n>                                   assert round(limit_value, 3) == round(result_list[rinse_index], 3), \\\n                                        (f\"Rinse limits from protocol {round(limit_value, 3)} not equal to custom data \"\n                                         f\"{round(result_list[rinse_index], 3)} for {sample_id}\")\nE                                   AssertionError: Rinse limits from protocol 0.0 not equal to custom data 0.039 for EQM-17/CAR-1\n\ntests\\unit\\protocols\\protocol_cleaning_agent_criteria.py:281: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1712647327079,"stop":1712647327378,"duration":299},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_facility","time":{"start":1712647327378,"stop":1712647327498,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_final_summary_cleaning_agent_residue_verification_details"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"15348-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cumczjd","url":"https://app.clickup.com/t/86cumczjd","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["multi_production_protocol","scenario","validate_final_summary_cleaning_agent_residue_verification_details"]},"source":"4be101b73b936829.json","parameterValues":[]}