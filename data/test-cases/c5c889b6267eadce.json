{"uid":"c5c889b6267eadce","name":"Validate the sample limits of Endotoxin residue verification for direct indirect bop","fullName":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol#test_validate_microbial_residue_swab_rinse_limits_absent_zero_non_split_inspection_room_grade","historyId":"b30909ecb0a445be9f1910201bedb53b","time":{"start":1712652134376,"stop":1712652135543,"duration":1167},"description":"This test case tests API to Create Protocol for Endotoxin residue verification and validate the sample limits when select based on policy for direct and indirect","descriptionHtml":"<p>This test case tests API to Create Protocol for Endotoxin residue verification and validate the sample limits when select based on policy for direct and indirect</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{}}","statusTrace":"self = <test_multi_production_protocol_microbial_policy_absent.TestMicrobialMultiProductionProtocol object at 0x00000152E915F0D0>\n\n    @allure.title(\"Validate the sample limits of Endotoxin residue verification for direct indirect bop\")\n    @allure.description(\"This test case tests API to Create Protocol for Endotoxin residue verification and validate \"\n                        \"the sample limits when select based on policy for direct and indirect\")\n    @allure.link(\"https://app.clickup.com/t/86cuw1zj2\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_microbial_residue_swab_rinse_limits_absent_zero_non_split_inspection_room_grade\n    def test_validate_microbial_residue_swab_rinse_limits_absent_zero_non_split_inspection_room_grade(self):\n>       protocol = self.test_validate_microbial_endotoxin_residue_swab_rinse_sample_limits_summary_absent_zero_non_split_room_grade()\n\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:3373: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:3340: in test_validate_microbial_endotoxin_residue_swab_rinse_sample_limits_summary_absent_zero_non_split_room_grade\n    data = self.test_microbial_endotoxin_protocol_swab_rinse_absent_zero_non_split_room_grade()\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:3287: in test_microbial_endotoxin_protocol_swab_rinse_absent_zero_non_split_room_grade\n    protocol_detail, data = self.setup_protocol(data)\ntests\\scenarios\\multi_production_protocol\\protocol\\test_multi_production_protocol_microbial_policy_absent.py:100: in setup_protocol\n    protocol_detail = self.multi_protocol.add_new_on_demand_protocol_multi_production(data)[\"response\"]\ntests\\unit\\protocols\\add_new_protocol.py:86: in add_new_on_demand_protocol_multi_production\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [500]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1712647327079,"stop":1712647327378,"duration":299},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_facility","time":{"start":1712647327378,"stop":1712647327498,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_microbial_residue_swab_rinse_limits_absent_zero_non_split_inspection_room_grade"},{"name":"tag","value":"formulation"},{"name":"tag","value":"microbial_multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.multi_production_protocol.protocol"},{"name":"suite","value":"test_multi_production_protocol_microbial_policy_absent"},{"name":"subSuite","value":"TestMicrobialMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"15348-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.multi_production_protocol.protocol.test_multi_production_protocol_microbial_policy_absent"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuw1zj2","url":"https://app.clickup.com/t/86cuw1zj2","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","validate_microbial_residue_swab_rinse_limits_absent_zero_non_split_inspection_room_grade","formulation","microbial_multi_production_protocol"]},"source":"c5c889b6267eadce.json","parameterValues":[]}